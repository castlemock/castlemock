package com.castlemock.repository.core.dynamodb.example;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.castlemock.core.basis.model.Saveable;
import com.castlemock.core.basis.model.SearchQuery;
import com.castlemock.repository.core.dynamodb.DynamoRepository;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.dozer.DozerBeanMapper;
import org.dozer.Mapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;

import static com.castlemock.repository.core.dynamodb.example.InventoryDynamoRepository.Inventory;
import static com.castlemock.repository.core.dynamodb.example.InventoryDynamoRepository.InventoryDocument;

@Repository
public class InventoryDynamoRepository extends DynamoRepository<InventoryDocument, Inventory, String> {

    @Autowired
    public InventoryDynamoRepository(DozerBeanMapper mapper, AmazonDynamoDB amazonDynamoDB, DynamoDBMapperConfig dynamoDBMapperConfig) {
        super(mapper, amazonDynamoDB, dynamoDBMapperConfig);
    }

    public InventoryDynamoRepository(DozerBeanMapper mapper, AmazonDynamoDB amazonDynamoDB) {
        super(mapper, amazonDynamoDB);
    }

    @Override
    protected void checkType(InventoryDocument type) {
        if (type.item.contains("samsung")){
            throw new IllegalArgumentException("samsung not allowed");
        }
    }

    @Override
    public List<Inventory> search(SearchQuery query) {
        return null;
    }

    @DynamoDBTable(tableName = "inventory")
    @Getter
    @Setter
    @NoArgsConstructor
    @ToString
    public static class InventoryDocument implements Saveable<String> {
        @DynamoDBHashKey(attributeName = "id")
        @DynamoDBAutoGeneratedKey
        @Mapping("id")
        String id;
        @DynamoDBAttribute(attributeName = "item")
        @Mapping("item")
        String item;
        @DynamoDBAttribute(attributeName = "cost")
        @Mapping("cost")
        Double cost;

        public InventoryDocument(String item, Double cost) {
            this.item = item;
            this.cost = cost;
        }
    }

    @Getter
    @Setter
    @NoArgsConstructor
    @ToString
    public static class Inventory {
        String id;
        String item;
        Double cost;

        public Inventory(String item, Double cost) {
            this.item = item;
            this.cost = cost;
        }
    }

}
